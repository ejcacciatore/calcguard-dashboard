{"version":3,"file":"static/js/906.033fce0e.chunk.js","mappings":"2KAoHA,QAlHA,WACE,MAAOA,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,MAE3CC,EAAQ,CACZ,CAAEC,GAAI,EAAGC,KAAM,qBAAsBC,EAAG,IAAKC,EAAG,IAAKC,KAAM,QAC3D,CAAEJ,GAAI,EAAGC,KAAM,oBAAqBC,EAAG,IAAKC,EAAG,IAAKC,KAAM,OAC1D,CAAEJ,GAAI,EAAGC,KAAM,gBAAiBC,EAAG,IAAKC,EAAG,IAAKC,KAAM,OACtD,CAAEJ,GAAI,EAAGC,KAAM,gBAAiBC,EAAG,IAAKC,EAAG,IAAKC,KAAM,UACtD,CAAEJ,GAAI,EAAGC,KAAM,OAAQC,EAAG,IAAKC,EAAG,IAAKC,KAAM,UAU/C,OACEC,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CACVC,QAAS,OACTC,WAAY,QACZC,OAAQ,OACRC,aAAc,OACdC,UAAW,kCACXC,SAAA,EACAC,EAAAA,EAAAA,KAAA,MAAIP,MAAO,CACTQ,aAAc,OACdC,MAAO,UACPC,SAAU,OACVC,WAAY,OACZL,SAAC,+BAIHP,EAAAA,EAAAA,MAAA,OAAKa,MAAM,MAAMC,OAAO,MAAMb,MAAO,CAAEc,OAAQ,oBAAqBV,aAAc,OAAQE,SAAA,CAxB1E,CAClB,CAAES,KAAM,EAAGC,GAAI,GACf,CAAED,KAAM,EAAGC,GAAI,GACf,CAAED,KAAM,EAAGC,GAAI,GACf,CAAED,KAAM,EAAGC,GAAI,IAsBEC,KAAI,CAACC,EAAMC,KACtB,MAAMC,EAAW3B,EAAM4B,MAAKC,GAAKA,EAAE5B,KAAOwB,EAAKH,OACzCQ,EAAS9B,EAAM4B,MAAKC,GAAKA,EAAE5B,KAAOwB,EAAKF,KAC7C,OACET,EAAAA,EAAAA,KAAA,QAEEiB,GAAIJ,EAASxB,EACb6B,GAAIL,EAASvB,EACb6B,GAAIH,EAAO3B,EACX+B,GAAIJ,EAAO1B,EACX+B,OAAO,UACPC,YAAY,KANPV,MAYV1B,EAAMwB,KAAIa,IACT/B,EAAAA,EAAAA,MAAA,KAAAO,SAAA,EACEC,EAAAA,EAAAA,KAAA,UACEwB,GAAID,EAAKlC,EACToC,GAAIF,EAAKjC,EACToC,EAAE,KACFC,KAAK,UACLN,OAAO,QACPC,YAAY,IACZ7B,MAAO,CAAEmC,OAAQ,WACjBC,QAASA,IAAM7C,EAAgBuC,MAEjCvB,EAAAA,EAAAA,KAAA,QACEX,EAAGkC,EAAKlC,EACRC,EAAGiC,EAAKjC,EAAI,GACZwC,WAAW,SACX3B,SAAS,KACTC,WAAW,MACXuB,KAAK,UAAS5B,SAEbwB,EAAKnC,SAnBFmC,EAAKpC,SAyBhBJ,IACCS,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CACVsC,UAAW,OACXrC,QAAS,OACTC,WAAY,UACZE,aAAc,MACdU,OAAQ,qBACRR,SAAA,EACAC,EAAAA,EAAAA,KAAA,MAAIP,MAAO,CAAEG,OAAQ,eAAgBM,MAAO,WAAYH,SACrDhB,EAAaK,QAEhBI,EAAAA,EAAAA,MAAA,KAAGC,MAAO,CAAEG,OAAQ,EAAGM,MAAO,WAAYH,SAAA,CAAC,SAClChB,EAAaQ,KAAK,oBAAaR,EAAaI,OAErDa,EAAAA,EAAAA,KAAA,UACE6B,QAASA,IAAM7C,EAAgB,MAC/BS,MAAO,CACLsC,UAAW,OACXrC,QAAS,cACTC,WAAY,UACZO,MAAO,QACPK,OAAQ,OACRV,aAAc,MACd+B,OAAQ,WACR7B,SACH,eAOX,C","sources":["TopologyDiagram.jsx"],"sourcesContent":["import { useState } from 'react';\r\n\r\nfunction TopologyDiagram() {\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n\r\n  const nodes = [\r\n    { id: 1, name: 'Bloomberg Terminal', x: 100, y: 100, type: 'data' },\r\n    { id: 2, name: 'Charles River OMS', x: 300, y: 100, type: 'oms' },\r\n    { id: 3, name: 'FlexTrade EMS', x: 500, y: 100, type: 'ems' },\r\n    { id: 4, name: 'Goldman Sachs', x: 200, y: 250, type: 'broker' },\r\n    { id: 5, name: 'NYSE', x: 400, y: 250, type: 'venue' },\r\n  ];\r\n\r\n  const connections = [\r\n    { from: 1, to: 2 },\r\n    { from: 2, to: 3 },\r\n    { from: 3, to: 4 },\r\n    { from: 4, to: 5 },\r\n  ];\r\n\r\n  return (\r\n    <div style={{ \r\n      padding: '2rem',\r\n      background: 'white',\r\n      margin: '2rem',\r\n      borderRadius: '16px',\r\n      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.1)'\r\n    }}>\r\n      <h2 style={{ \r\n        marginBottom: '2rem',\r\n        color: '#1f2937',\r\n        fontSize: '24px',\r\n        fontWeight: '700'\r\n      }}>\r\n        Technical System Topology\r\n      </h2>\r\n      \r\n      <svg width=\"600\" height=\"350\" style={{ border: '1px solid #e5e7eb', borderRadius: '8px' }}>\r\n        {/* Render connections */}\r\n        {connections.map((conn, i) => {\r\n          const fromNode = nodes.find(n => n.id === conn.from);\r\n          const toNode = nodes.find(n => n.id === conn.to);\r\n          return (\r\n            <line\r\n              key={i}\r\n              x1={fromNode.x}\r\n              y1={fromNode.y}\r\n              x2={toNode.x}\r\n              y2={toNode.y}\r\n              stroke=\"#6b7280\"\r\n              strokeWidth=\"2\"\r\n            />\r\n          );\r\n        })}\r\n        \r\n        {/* Render nodes */}\r\n        {nodes.map(node => (\r\n          <g key={node.id}>\r\n            <circle\r\n              cx={node.x}\r\n              cy={node.y}\r\n              r=\"25\"\r\n              fill=\"#3b82f6\"\r\n              stroke=\"white\"\r\n              strokeWidth=\"3\"\r\n              style={{ cursor: 'pointer' }}\r\n              onClick={() => setSelectedNode(node)}\r\n            />\r\n            <text\r\n              x={node.x}\r\n              y={node.y + 40}\r\n              textAnchor=\"middle\"\r\n              fontSize=\"12\"\r\n              fontWeight=\"600\"\r\n              fill=\"#1f2937\"\r\n            >\r\n              {node.name}\r\n            </text>\r\n          </g>\r\n        ))}\r\n      </svg>\r\n      \r\n      {selectedNode && (\r\n        <div style={{\r\n          marginTop: '2rem',\r\n          padding: '1rem',\r\n          background: '#f8fafc',\r\n          borderRadius: '8px',\r\n          border: '1px solid #e2e8f0'\r\n        }}>\r\n          <h3 style={{ margin: '0 0 0.5rem 0', color: '#1f2937' }}>\r\n            {selectedNode.name}\r\n          </h3>\r\n          <p style={{ margin: 0, color: '#6b7280' }}>\r\n            Type: {selectedNode.type} â€¢ Node ID: {selectedNode.id}\r\n          </p>\r\n          <button \r\n            onClick={() => setSelectedNode(null)}\r\n            style={{\r\n              marginTop: '1rem',\r\n              padding: '0.5rem 1rem',\r\n              background: '#3b82f6',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '4px',\r\n              cursor: 'pointer'\r\n            }}\r\n          >\r\n            Close\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TopologyDiagram;"],"names":["selectedNode","setSelectedNode","useState","nodes","id","name","x","y","type","_jsxs","style","padding","background","margin","borderRadius","boxShadow","children","_jsx","marginBottom","color","fontSize","fontWeight","width","height","border","from","to","map","conn","i","fromNode","find","n","toNode","x1","y1","x2","y2","stroke","strokeWidth","node","cx","cy","r","fill","cursor","onClick","textAnchor","marginTop"],"sourceRoot":""}